{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Cellular_Automata","provenance":[{"file_id":"1ie8_PJUYcS7RAbAP8J_IfGTmE0K3d66P","timestamp":1611338885717},{"file_id":"1SEw3Nsw8w6boGj9trNb5hmwGr1r6Esgu","timestamp":1611144331681},{"file_id":"171_TWT-Am5hgiYyUMDstZdyzrH2nNrL0","timestamp":1610025279276},{"file_id":"1I6DNV4lsaj0Q0M7ybgeUPX40VMvmMmsv","timestamp":1609862549553},{"file_id":"1DdBgaOtQ4U7XjHOfADUJf0akIn92LUHZ","timestamp":1607705721216},{"file_id":"1L2o5A2vko0-KWNNTaELBAjjlvZ2wGN8i","timestamp":1607617282280},{"file_id":"1nvJ3L0U0FP5orhNrtx-TWm-oJ4wAbZsP","timestamp":1607613928447}],"collapsed_sections":[],"authorship_tag":"ABX9TyMzo4K+KeQRyC/lMf0nIiSX"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"pDzbVQ_T6iBD"},"source":["# Cellular Automata on image classification.\n","\n","In this notebook we train and test Cellular Automata (CA) on a grid whose goal is to collectively decide which class an image belongs to. \n","\n","We consider different tasks:\n","1. **Count Pixels**: In this task the inputs are binary images, and the goal is to be able to collectively agree the size in pixels of the contiguous area of black pixels.\n","1. **XOR**: In this task the inputs are binary images, on the left (and right) side of the picture there will be either a vertical or horizontal bar. The goal is for the automata to collectively decide if the two objects are the same or not. The cells need to come up with a message system to propagate the information about which object is present.\n","1. **Fruits**: In this task, the inputs are grayscale images of 3 kinds of fruits: Bananas, Apples and Oranges. The goal for the CA is to globally identify the class of the images only given local information.\n","1. **Frozen noise**: In this debugging task, we present random frozen images that either belong to one of two classes. The goal for the CA is to globally identify the class only given local information.\n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z-1wywoxncZg","executionInfo":{"status":"ok","timestamp":1613562435557,"user_tz":0,"elapsed":563,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"b20c6b71-2464-4fe9-a8c8-599253fcc949"},"source":["# Run this if you want to connect this collab notebook to your google drive (useful for saving models in training)\n","from google.colab import drive\n","drive.mount('/content/drive')\n","folder = 'drive/MyDrive/Code/GitHub/CellularAutomata' # use whatever path the repo is found on your google drive\n","import sys\n","sys.path.insert(1, folder) # we insert the repo into the path such that we can easily import the necessary modules"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zo-knd3UDME_","executionInfo":{"status":"ok","timestamp":1613562438270,"user_tz":0,"elapsed":3270,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"b1b347a3-4366-41cd-ad06-3f273997e7c2"},"source":["import ca_models as cam #this module contains the keras models, the loss function, etc.\n","import datasets_library as dsl #this module creates and loads the different datasets for the tasks\n","import ca_visualisation as cavis #this module is useful for visualisation of progress and producing final videos\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from IPython.display import clear_output\n","from tensorflow.python.client import device_lib\n","print(device_lib.list_local_devices()) # Useful to check if the collab is using GPU"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[name: \"/device:CPU:0\"\n","device_type: \"CPU\"\n","memory_limit: 268435456\n","locality {\n","}\n","incarnation: 8111337134774703515\n",", name: \"/device:GPU:0\"\n","device_type: \"GPU\"\n","memory_limit: 14674281152\n","locality {\n","  bus_id: 1\n","  links {\n","  }\n","}\n","incarnation: 13527335701821167728\n","physical_device_desc: \"device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\"\n","]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EKLwI-jTx2By","executionInfo":{"status":"ok","timestamp":1613562438270,"user_tz":0,"elapsed":3264,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["# import importlib\n","# importlib.reload(ca_models)\n","# importlib.reload(vis_ca)\n","# importlib.reload(datasets_library)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qu-zdZ8JyffI","executionInfo":{"status":"ok","timestamp":1613562438271,"user_tz":0,"elapsed":3262,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["task = 'fruits' # 'count_pixels' 'fruits' 'xor' 'frozen_noise' 'emotions' \n","# Type of Run\n","JustTestingCodeQ = False # If True run everything faster, for Debugging\n","SuffleLabelsQ = False # If True we randomly shuffle the labels, useful to have a notion of the parameters with noise\n","LoadPreviousModelQ, i_step_load = False, 2800 # if True we load the model, either for further training or just testing\n","RunTrainingQ = True # If True we run the neural network training\n","RunTestMoviesQ = True # if True, in the end we test an increasing size of inputs\n","MutateTestingQ = False # if True, during testing we mutate the image\n","SEED_TRAINING = 1\n","SEED_MOVIES = 1\n","if task == 'count_pixels':\n","    RunTestIncreaseQ = True # if True, in the end we test an increasing size of inputs\n","else:\n","    RunTestIncreaseQ = False # if True, in the end we test an increasing size of inputs"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"_FamWPRoxKdg","executionInfo":{"status":"ok","timestamp":1613562438272,"user_tz":0,"elapsed":3261,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["# Model Options\n","model_complexity = 'middle' # 'simplest' 'middle' 'complex' // {'count_digits': 'middle', 'fruits': 'middle', 'xor': 'complex'}\n","NO_NEIGHBORS = 1 # the radius for the immediate neighbors to consider # 1->3x3 neighborhood, 2->5x5, 3->7x7, 4->9x9\n","AddNoiseQ = True # if True then the normal state-update of the CA has noise added. Adds robustness to training\n","InitializeRandomQ = True # if True, the initial state of the CA is random. Adds robustness to training\n","MutateTrainingQ = False # if True, during training we mutate the image to another random one\n","no_channels = 'FiftyChannels' # 'SameClasses' '5PlusClasses' '4TimesClasses' 'FiftyChannels'\n","BATCH_SIZE = 64 # number of images per batch\n","BATCH_SIZE = 16 # number of images per batch\n","LR = 1e-3 # initial learning rate\n","LR = 5e-4 # initial learning rate # frozen_noise\n","UseLRScheduleQ = True # if True use Adam with a learning rate schedule"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"wyzeUtdPt3Op","executionInfo":{"status":"ok","timestamp":1613562438272,"user_tz":0,"elapsed":3258,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["# Task and Dataset parameters\n","RebuildDatasetQ = False # if True we rebuild the dataset\n","ds_options = {}\n","ds_options['SEED_DATASET'] = 1\n","if task == 'emotions':\n","    TR_EVOLVE = 150 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 150 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['classes_labels'] = ['Happy', 'Sad'] # ['Happy', 'Neutral', 'Sad', 'Fear', 'Angry', 'Surprise', 'Disgust']\n","    ds_options['DataBalancingQ'] = True\n","    ds_options['DataAugmentationQ'] = True\n","elif task == 'count_pixels':\n","    TR_EVOLVE = 50 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 50 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['limits_classes'] = [2, 5, 9, 14, 20, 27, 35] # boundaries of the classes. len of this should be NO_CLASSES-1 ## [2]  [2, 8] [2, 5, 8, 12] [1, 2, 3, 5, 7, 10, 13] [2, 5, 9, 14, 20, 27, 35]\n","    ds_options['MAXPIXELS'] = 44 # Maximum allowed contiguous pixels for the images ## 10 15 44\n","    ds_options['SIZE_DS'] = 100000 #the number of images on the dataset\n","    ds_options['H'], ds_options['W'] = 10, 10 # Height and Width of the images\n","    ds_options['BOUNDARY_P'] = 0.4 # the proportion of the dataset devoted to the boundaries of the dataset\n","elif task == 'xor':\n","    TR_EVOLVE = 75 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 100 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['classes_labels'] = ['same', 'diff']\n","    ds_options['type_ds'] = 'xor' # 'simple' 'xor'\n","    ds_options['H'], ds_options['WW'], ds_options['WW_test'] = 3, 5, 15\n","    ds_options['obj1_str'] = 'vertical_small'\n","    ds_options['obj2_str'] = 'horizontal_small'\n","    ds_options['SIZE_DS'] = 10000\n","elif task == 'fruits':\n","    TR_EVOLVE = 150 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 150 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['H'], ds_options['W'] = 50, 50\n","    TR_EVOLVE = 60 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 60 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['H'], ds_options['W'] = 15, 15\n","    TR_EVOLVE = 70 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 70 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['H'], ds_options['W'] = 20, 20\n","elif task == 'frozen_noise':\n","    TR_EVOLVE = 300 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 300 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['img_per_class'] = 2\n","    ds_options['H'], ds_options['W'] = 10, 10"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"6s54kJoYRbIG","executionInfo":{"status":"ok","timestamp":1613562439068,"user_tz":0,"elapsed":4051,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"e33c01db-1da6-4b15-aa4f-3bcba947bb02"},"source":["# Get the dataset\n","x_train, x_test, y_train, y_test, ds_str, NO_CLASSES, H, W, classes_labels = dsl.get_dataset(task, ds_options, RebuildDatasetQ, folder)\n","if task == 'xor':\n","    W_test = 2 * ds_options['H'] + ds_options['WW_test'] # in this task we want our test images to be wider than the training images\n","if SuffleLabelsQ:\n","    np.random.shuffle(y_train)\n","\n","y_train_hot = dsl.y2yhot(x_train, y_train, NO_CLASSES, task)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[[0 1 1 0 0 1 2]\n"," [1 2 2 2 0 2 0]\n"," [2 1 2 0 2 1 2]\n"," [2 1 1 0 2 2 0]\n"," [0 2 0 0 0 0 2]\n"," [1 2 0 1 2 2 1]\n"," [0 2 0 1 1 2 0]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"glI_jYZWR4EF","executionInfo":{"status":"ok","timestamp":1613562439069,"user_tz":0,"elapsed":4046,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"03b40680-afa3-4ff2-c4ce-3e69bb820a42"},"source":["print(y_train_hot.shape, y_train.shape, np.all(np.sum(y_train_hot, axis=(1, 2, 3)) == H * W), np.max(y_train_hot), np.min(y_train_hot), np.isnan(x_train).any())\n","y = 1\n","for i in range(y_train.shape[0]):\n","    y *= np.sum(y_train_hot[i, 0, 0, y_train[i]])\n","print(y)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(295, 20, 20, 3) (295,) True 1.0 0.0 False\n","1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Aj5M6oJxCof","executionInfo":{"status":"ok","timestamp":1613562439070,"user_tz":0,"elapsed":4043,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"c4be33c0-629f-4739-84bc-20f071cb3991"},"source":["print(ds_str)\n","\n","id_str = 'CA_{}_Modl{}_Channels{}'.format(ds_str, model_complexity, no_channels) # the prefix to all file names which will be use for saving and loading the model\n","if NO_NEIGHBORS != 1:\n","    id_str += '_Neigh{}'.format(NO_NEIGHBORS)\n","if AddNoiseQ:\n","    id_str += '_AddNoise'\n","if InitializeRandomQ:\n","    id_str += '_InitRnd'\n","if MutateTrainingQ:\n","    id_str += '_MutTrain'\n","if SuffleLabelsQ:\n","    id_str += '_Shuffle'\n","print(id_str)\n","\n","dead_pixels = False\n","if task == 'count_pixels':\n","    dead_pixels = True\n","\n","if JustTestingCodeQ:\n","    TR_NO_ITERATIONS = 500 # number of iterations for the training loop\n","    EXPORT_EVERY = 100 # number of iterations between each model export\n","    VISUALISE_EVERY = 50 # number of iteration between each model visualisation\n","    i_step_verify = [500] # [250, 500]\n","else:\n","    TR_NO_ITERATIONS = 500000 # number of iterations for the training loop\n","    EXPORT_EVERY = 2000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [240000, 500000] # [240000, 500000]\n","\n","    # xor\n","    TR_NO_ITERATIONS = 5000 # number of iterations for the training loop\n","    EXPORT_EVERY = 100 # number of iterations between each model export\n","    VISUALISE_EVERY = 50 # number of iteration between each model visualisation\n","    i_step_verify = [0, 5000] # [240000, 500000]\n","\n","    # # TR_NO_ITERATIONS = 20000 # number of iterations for the training loop\n","    # EXPORT_EVERY = 1000 # number of iterations between each model export\n","    # VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    # i_step_verify = [0, 20000] # [240000, 500000]\n","\n","    # fruits\n","    TR_NO_ITERATIONS = 50000 # number of iterations for the training loop\n","    EXPORT_EVERY = 2000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [20000, 50000] # [240000, 500000]\n","\n","    # # count_digits\n","    # TR_NO_ITERATIONS = 200000 # number of iterations for the training loop\n","    # EXPORT_EVERY = 2000 # number of iterations between each model export\n","    # VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    # i_step_verify = [100000, 200000] # [240000, 500000]\n","\n","    # TR_NO_ITERATIONS = 100 # number of iterations for the training loop\n","    # EXPORT_EVERY = 2000 # number of iterations between each model export\n","    # VISUALISE_EVERY = 50 # number of iteration between each model visualisation\n","    # i_step_verify = [100000, 200000] # [240000, 500000]\n","    \n","    #\n","if LoadPreviousModelQ and not RunTrainingQ:\n","    i_step_verify = [i_step_load]\n","\n","if NO_CLASSES == 1:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [0, 0, 0], # This is for when no class is voted.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","if NO_CLASSES == 2:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [0, 255, 0],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","elif NO_CLASSES == 3:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [215, 252, 0],\n","                        [0, 0, 255],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","elif NO_CLASSES == 5:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [0, 255, 0],\n","                        [0, 0, 255],\n","                        [255, 255, 0],\n","                        [0, 255, 255],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","elif NO_CLASSES == 8:\n","    color_lookup = tf.constant([\n","                        [85, 85, 85], #These are the colors for the different classes\n","                        [255, 0, 0], \n","                        [0, 255, 0],\n","                        [0, 0, 255],\n","                        [255, 255, 0],\n","                        [0, 255, 255],\n","                        [255, 0, 255],\n","                        [170, 170, 170],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","\n","if no_channels == 'SameClasses':\n","    NO_CHANNELS = NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == '4TimesClasses':\n","    NO_CHANNELS = 4 * NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == '5PlusClasses':\n","    NO_CHANNELS = 5 + NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == 'FiftyChannels':\n","    NO_CHANNELS = 50 # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","\n","\n","if UseLRScheduleQ:\n","    first_point = int(TR_NO_ITERATIONS*0.3333)\n","    second_point = int(TR_NO_ITERATIONS*0.6667)\n","    if LoadPreviousModelQ and RunTrainingQ:\n","        if i_step_load > second_point:\n","            trainer = tf.keras.optimizers.Adam(learning_rate=LR*0.01) # use ADAM optimizer\n","        elif i_step_load > first_point:\n","            remaining_steps = TR_NO_ITERATIONS - i_step_load\n","            lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2 * (second_point - i_step_load)], [LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","            trainer = tf.keras.optimizers.Adam(lr_sched) # use ADAM optimizer with learning rate schedule\n","        else:\n","            lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2 * (first_point - i_step_load), 2 * (second_point - i_step_load)], [LR, LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","            trainer = tf.keras.optimizers.Adam(lr_sched) # use ADAM optimizer with learning rate schedule\n","    else:\n","        lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2*first_point, 2*second_point], [LR, LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","        trainer = tf.keras.optimizers.Adam(lr_sched) # use ADAM optimizer with learning rate schedule\n","else:\n","    trainer = tf.keras.optimizers.Adam(learning_rate=LR) # use ADAM optimizer\n","\n","loss_log = np.zeros(TR_NO_ITERATIONS) # for plotting of loss function across time\n","loss_log_classes = np.zeros((TR_NO_ITERATIONS, NO_CLASSES)) # for plotting of loss function across time"],"execution_count":9,"outputs":[{"output_type":"stream","text":["fruits_H20_W20\n","CA_fruits_H20_W20_Modlmiddle_ChannelsFiftyChannels_AddNoise_InitRnd\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RgNuQfis7p4g","executionInfo":{"status":"ok","timestamp":1613562440247,"user_tz":0,"elapsed":5214,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["if LoadPreviousModelQ:\n","    ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_load, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity, dead_pixels=dead_pixels)\n","    ITER = i_step_load + 1\n","else:\n","    ca = cam.CAModel(NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, add_noise=AddNoiseQ, model_complexity=model_complexity, dead_pixels=dead_pixels)\n","    ITER = 0"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HfxS25QT9cdK","executionInfo":{"status":"ok","timestamp":1613562440249,"user_tz":0,"elapsed":5212,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"6d09e06f-2e04-48c8-de2f-2cea2d45bf77"},"source":["ca.update_state.summary()"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (1, 20, 20, 40)           18400     \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (1, 20, 20, 50)           2050      \n","=================================================================\n","Total params: 20,450\n","Trainable params: 20,450\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PcMsi_PmoEVD","colab":{"base_uri":"https://localhost:8080/","height":298},"outputId":"21fb420e-2067-4f0c-a6ab-ada01464519b"},"source":["# Training happens here\n","np.random.seed(SEED_TRAINING)\n","if RunTrainingQ:\n","    # Training Loop\n","    for i in range(ITER, TR_NO_ITERATIONS):\n","        b_idx = np.random.randint(x_train.shape[0], size=BATCH_SIZE)\n","        if InitializeRandomQ:\n","            x0 = ca.initialize_random(x_train[b_idx])\n","        else:\n","            x0 = ca.initialize(x_train[b_idx])\n","        y0 = y_train_hot[b_idx]\n","        y0_label = y_train[b_idx]\n","        y0_label = tf.convert_to_tensor(y0_label)        \n","\n","        x, loss, c_l = cam.train_step(trainer, ca, x0, y0, y0_label, TR_EVOLVE, NO_CLASSES, MutateTrainingQ=MutateTrainingQ)\n","\n","        loss_log[i] = loss.numpy()\n","        loss_log_classes[i, :] = [k.numpy() for k in c_l]\n","\n","        if i % EXPORT_EVERY == 0:\n","            cam.export_model(folder, id_str, ca, i, loss_log, loss_log_classes)\n","        if i % VISUALISE_EVERY == 0:\n","            clear_output()\n","            cavis.plot_loss(loss_log[:(i+1)], loss_log_classes[:(i+1), :], folder, id_str, classes_labels, color_lookup, True)\n","\n","        if NO_CLASSES > 5:\n","            print('\\r step: {}, log10(loss): {}'.format(i + 1, np.log10(loss)), end='')\n","        else:\n","            print('\\r step: {}, log10(loss): {}, log10(loss)[classes]: {}'.format(i + 1, np.log10(loss), np.log10(c_l)), end='')\n","    cam.export_model(folder, id_str, ca, TR_NO_ITERATIONS, loss_log, loss_log_classes)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":[" step: 31, log10(loss): 2.6981823444366455, log10(loss)[classes]: [2.596039  2.8053114 2.4054983]"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vV_WIAkvoGol"},"source":["if RunTestMoviesQ:\n","    eval_bs = 5 ** 2 # number of samples to show in the movie\n","    for i_step_v in i_step_verify:\n","        if task == 'xor':\n","            ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_v, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W_test, AddNoiseQ, model_complexity)\n","        else:\n","            ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_v, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity, dead_pixels=dead_pixels)\n","\n","        np.random.seed(SEED_MOVIES)\n","\n","        new_idx = np.random.randint(0, x_test.shape[0], size=eval_bs)\n","        if InitializeRandomQ:\n","            x0 = ca.initialize_random(x_test[new_idx])\n","        else:\n","            x0 = ca.initialize(x_test[new_idx])\n","\n","        cavis.make_run_videos(folder, id_str, i_step_v, TST_EVOLVE, MutateTestingQ, x0, ca, color_lookup)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sVLw4p-md6WM"},"source":["if RunTestIncreaseQ:\n","    eval_bs = 10 ** 2 # number of samples to show in the movie\n","    max_size = ds_options['MAXPIXELS']\n","\n","    images = np.zeros((max_size, eval_bs, H, W), dtype=np.float32)\n","    for i_img in range(eval_bs):\n","        images[0, i_img, int(H / 2), int(W / 2)] = 1\n","    for j in range(1, max_size):\n","        for i_img in range(eval_bs):\n","            images[j, i_img, :, :] = cavis.add_pixel(images[j - 1, i_img, :, :])\n","    images = tf.constant(images)\n","    for i_step_v in i_step_verify:\n","        ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_v, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity, dead_pixels=dead_pixels)\n","        cavis.make_videos_increase(folder, id_str, i_step_v, TST_EVOLVE, ca, color_lookup, images, InitializeRandomQ, ds_options['limits_classes'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p8VIFCumNSIi"},"source":[""],"execution_count":null,"outputs":[]}]}