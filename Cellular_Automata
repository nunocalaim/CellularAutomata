{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Cellular_Automata","provenance":[{"file_id":"1ie8_PJUYcS7RAbAP8J_IfGTmE0K3d66P","timestamp":1611338885717},{"file_id":"1SEw3Nsw8w6boGj9trNb5hmwGr1r6Esgu","timestamp":1611144331681},{"file_id":"171_TWT-Am5hgiYyUMDstZdyzrH2nNrL0","timestamp":1610025279276},{"file_id":"1I6DNV4lsaj0Q0M7ybgeUPX40VMvmMmsv","timestamp":1609862549553},{"file_id":"1DdBgaOtQ4U7XjHOfADUJf0akIn92LUHZ","timestamp":1607705721216},{"file_id":"1L2o5A2vko0-KWNNTaELBAjjlvZ2wGN8i","timestamp":1607617282280},{"file_id":"1nvJ3L0U0FP5orhNrtx-TWm-oJ4wAbZsP","timestamp":1607613928447}],"collapsed_sections":[],"authorship_tag":"ABX9TyN0WlWyQ3hRihkKy4DlGYBr"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"pDzbVQ_T6iBD"},"source":["# Cellular Automata on image classification.\n","\n","In this notebook we train and test Cellular Automata (CA) on a grid whose goal is to collectively decide which class an image belongs to. \n","\n","We consider different tasks:\n","1. **Count Pixels**: In this task the inputs are binary images, and the goal is to be able to collectively agree the size in pixels of the contiguous area of black pixels.\n","1. **XOR**: In this task the inputs are binary images, on the left (and right) side of the picture there will be either a vertical or horizontal bar. The goal is for the automata to collectively decide if the two objects are the same or not. The cells need to come up with a message system to propagate the information about which object is present.\n","1. **Fruits**: In this task, the inputs are grayscale images of 3 kinds of fruits: Bananas, Apples and Oranges. The goal for the CA is to globally identify the class of the images only given local information.\n","1. **Emotions**: In this task the inputs are grayscale images of people's faces expressing emotions. the goal is for the automata to collectively identify the emotion present in the picture.\n","1. **Frozen noise**: In this debugging task, we present random frozen images that either belong to one of two classes. The goal for the CA is to globally identify the class only given local information.\n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z-1wywoxncZg","executionInfo":{"status":"ok","timestamp":1612635582210,"user_tz":0,"elapsed":361,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"bc0cf3f4-bba4-4228-f67a-4d47ef5a0d6b"},"source":["# Run this if you want to connect this collab notebook to your google drive (useful for saving models in training)\n","from google.colab import drive\n","drive.mount('/content/drive')\n","folder = 'drive/MyDrive/Code/GitHub/CellularAutomata' # use whatever path the repo is found on your google drive\n","import sys\n","sys.path.insert(1, folder) # we insert the repo into the path such that we can easily import the necessary modules"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zo-knd3UDME_","executionInfo":{"status":"ok","timestamp":1612635585160,"user_tz":0,"elapsed":3307,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"1ee01abb-0301-4545-9cbc-8d0bf6ecdf78"},"source":["import ca_models as cam #this module contains the keras models, the loss function, etc.\n","import datasets_library as dsl #this module creates and loads the different datasets for the tasks\n","import ca_visualisation as cavis #this module is useful for visualisation of progress and producing final videos\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from IPython.display import clear_output\n","from tensorflow.python.client import device_lib\n","print(device_lib.list_local_devices()) # Useful to check if the collab is using GPU"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[name: \"/device:CPU:0\"\n","device_type: \"CPU\"\n","memory_limit: 268435456\n","locality {\n","}\n","incarnation: 5906349412905759077\n",", name: \"/device:GPU:0\"\n","device_type: \"GPU\"\n","memory_limit: 14638920512\n","locality {\n","  bus_id: 1\n","  links {\n","  }\n","}\n","incarnation: 13797738767933267150\n","physical_device_desc: \"device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\"\n","]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EKLwI-jTx2By","executionInfo":{"status":"ok","timestamp":1612635585160,"user_tz":0,"elapsed":3302,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["# import importlib\n","# importlib.reload(ca_models)\n","# importlib.reload(vis_ca)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qu-zdZ8JyffI","executionInfo":{"status":"ok","timestamp":1612635585161,"user_tz":0,"elapsed":3301,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["task = 'count_pixels' # 'emotions' 'xor' 'count_pixels' 'fruits' 'frozen_noise'\n","# Type of Run\n","JustTestingCodeQ = False # If True run everything faster, for Debugging\n","SuffleLabelsQ = False # If True we randomly shuffle the labels, useful to have a notion of the parameters with noise\n","LoadPreviousModelQ, i_step_load = False, 3000 # if True we load the model, either for further training or just testing\n","RunTrainingQ = True # If True we run the neural network training\n","RunTestMoviesQ = True # if True, in the end we test an increasing size of inputs\n","MutateTestingQ = True # if True, during testing we mutate the image\n","SEED_TRAINING = 1\n","SEED_MOVIES = 1\n","if task == 'count_pixels':\n","    RunTestIncreaseQ = True # if True, in the end we test an increasing size of inputs\n","else:\n","    RunTestIncreaseQ = False # if True, in the end we test an increasing size of inputs"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"_FamWPRoxKdg","executionInfo":{"status":"ok","timestamp":1612635585162,"user_tz":0,"elapsed":3300,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["# Model Options\n","model_complexity = 'middle' # 'simplest' 'middle' 'complex'\n","NO_NEIGHBORS = 1 # the radius for the immediate neighbors to consider # 1->3x3 neighborhood, 2->5x5, 3->7x7, 4->9x9\n","AddNoiseQ = True # if True then the normal state-update of the CA has noise added. Adds robustness to training\n","InitializeRandomQ = True # if True, the initial state of the CA is random. Adds robustness to training\n","MutateTrainingQ = True # if True, during training we mutate the image to another random one\n","no_channels = 'FiftyChannels' # 'SameClasses' '5PlusClasses' '4TimesClasses' 'FiftyChannels'\n","BATCH_SIZE = 64 # number of images per batch\n","# BATCH_SIZE = 16 # number of images per batch\n","LR = 1e-3 # initial learning rate\n","# LR = 1e-4 # initial learning rate\n","UseLRScheduleQ = True # if True use Adam with a learning rate schedule"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"wyzeUtdPt3Op","executionInfo":{"status":"ok","timestamp":1612635585163,"user_tz":0,"elapsed":3298,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["# Task and Dataset parameters\n","RebuildDatasetQ = False # if True we rebuild the dataset\n","ds_options = {}\n","ds_options['SEED_DATASET'] = 1\n","if task == 'emotions':\n","    TR_EVOLVE = 150 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 150 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['classes_labels'] = ['Happy', 'Sad'] # ['Happy', 'Neutral', 'Sad', 'Fear', 'Angry', 'Surprise', 'Disgust']\n","    ds_options['DataBalancingQ'] = True\n","    ds_options['DataAugmentationQ'] = True\n","elif task == 'count_pixels':\n","    TR_EVOLVE = 50 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 50 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['limits_classes'] = [2, 5, 9, 14, 20, 27, 35] # boundaries of the classes. len of this should be NO_CLASSES-1 ## [2]  [2, 8] [2, 5, 8, 12] [1, 2, 3, 5, 7, 10, 13] [2, 5, 9, 14, 20, 27, 35]\n","    ds_options['MAXPIXELS'] = 44 # Maximum allowed contiguous pixels for the images ## 10 15 44\n","    ds_options['SIZE_DS'] = 100000 #the number of images on the dataset\n","    ds_options['H'], ds_options['W'] = 10, 10 # Height and Width of the images\n","    ds_options['BOUNDARY_P'] = 0.4 # the proportion of the dataset devoted to the boundaries of the dataset\n","elif task == 'xor':\n","    TR_EVOLVE = 75 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 100 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['classes_labels'] = ['same', 'diff']\n","    ds_options['type_ds'] = 'xor' # 'simple' 'xor'\n","    ds_options['H'], ds_options['WW'], ds_options['WW_test'] = 3, 5, 15\n","    ds_options['obj1_str'] = 'vertical_small'\n","    ds_options['obj2_str'] = 'horizontal_small'\n","    ds_options['SIZE_DS'] = 10000\n","elif task == 'fruits':\n","    TR_EVOLVE = 150 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 150 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['H'], ds_options['W'] = 50, 50\n","    TR_EVOLVE = 60 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 60 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['H'], ds_options['W'] = 15, 15\n","    TR_EVOLVE = 70 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 70 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['H'], ds_options['W'] = 20, 20\n","elif task == 'frozen_noise':\n","    TR_EVOLVE = 300 # Number of time steps to let CA evolve for each input during training\n","    TST_EVOLVE = 300 # Number of time steps to let CA evolve for each input during testing\n","    ds_options['img_per_class'] = 2\n","    ds_options['H'], ds_options['W'] = 10, 10"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"id":"6s54kJoYRbIG","executionInfo":{"status":"ok","timestamp":1612635585947,"user_tz":0,"elapsed":4078,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"3a89d863-2a28-458a-9a52-56bf648bbcb0"},"source":["# Get the dataset\n","x_train, x_test, y_train, y_test, ds_str, NO_CLASSES, H, W, classes_labels = dsl.get_dataset(task, ds_options, RebuildDatasetQ, folder)\n","if task == 'xor':\n","    W_test = 2 * ds_options['H'] + ds_options['WW_test'] # in this task we want our test images to be wider than the training images\n","if SuffleLabelsQ:\n","    np.random.shuffle(y_train)\n","\n","y_train_hot = dsl.y2yhot(x_train, y_train, NO_CLASSES, task)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[[2 6 3 1 5 5 1]\n"," [1 7 5 2 3 5 6]\n"," [4 6 1 7 6 2 2]\n"," [7 2 5 6 7 1 6]\n"," [5 1 5 1 0 7 3]\n"," [3 5 6 0 2 4 0]\n"," [1 5 3 7 2 1 2]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"glI_jYZWR4EF","executionInfo":{"status":"ok","timestamp":1612635586466,"user_tz":0,"elapsed":4593,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"ef9b9ccc-493c-4632-8b7a-3e2d007a17e1"},"source":["print(y_train_hot.shape, y_train.shape, np.all(np.sum(y_train_hot, axis=(1, 2, 3)) == H * W), np.max(y_train_hot), np.min(y_train_hot), np.isnan(x_train).any())\n","y = 1\n","for i in range(y_train.shape[0]):\n","    y *= np.sum(y_train_hot[i, 0, 0, y_train[i]])\n","print(y)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["(80000, 10, 10, 8) (80000,) False 1.0 0.0 False\n","0.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Aj5M6oJxCof","executionInfo":{"status":"ok","timestamp":1612635586468,"user_tz":0,"elapsed":4591,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"c18edbde-0a7a-446e-86ec-3e270f7c5dff"},"source":["print(ds_str)\n","\n","id_str = 'CA_{}_Modl{}_Channels{}'.format(ds_str, model_complexity, no_channels) # the prefix to all file names which will be use for saving and loading the model\n","if NO_NEIGHBORS != 1:\n","    id_str += '_Neigh{}'.format(NO_NEIGHBORS)\n","if AddNoiseQ:\n","    id_str += '_AddNoise'\n","if InitializeRandomQ:\n","    id_str += '_InitRnd'\n","if MutateTrainingQ:\n","    id_str += '_MutTrain'\n","if SuffleLabelsQ:\n","    id_str += '_Shuffle'\n","print(id_str)\n","\n","dead_pixels = False\n","if task == 'count_pixels':\n","    dead_pixels = True\n","\n","if JustTestingCodeQ:\n","    TR_NO_ITERATIONS = 500 # number of iterations for the training loop\n","    EXPORT_EVERY = 100 # number of iterations between each model export\n","    VISUALISE_EVERY = 50 # number of iteration between each model visualisation\n","    i_step_verify = [500] # [250, 500]\n","else:\n","    TR_NO_ITERATIONS = 500000 # number of iterations for the training loop\n","    EXPORT_EVERY = 2000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [240000, 500000] # [240000, 500000]\n","\n","    TR_NO_ITERATIONS = 5000 # number of iterations for the training loop\n","    EXPORT_EVERY = 100 # number of iterations between each model export\n","    VISUALISE_EVERY = 50 # number of iteration between each model visualisation\n","    i_step_verify = [0, 5000] # [240000, 500000]\n","\n","    TR_NO_ITERATIONS = 20000 # number of iterations for the training loop\n","    EXPORT_EVERY = 1000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [0, 20000] # [240000, 500000]\n","\n","    # fruits\n","    TR_NO_ITERATIONS = 50000 # number of iterations for the training loop\n","    EXPORT_EVERY = 2000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [20000, 50000] # [240000, 500000]\n","\n","    # count_digits\n","    TR_NO_ITERATIONS = 200000 # number of iterations for the training loop\n","    EXPORT_EVERY = 2000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [100000, 200000] # [240000, 500000]\n","    \n","    #\n","if LoadPreviousModelQ and not RunTrainingQ:\n","    i_step_verify = [i_step_load]\n","\n","if NO_CLASSES == 1:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [0, 0, 0], # This is for when no class is voted.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","if NO_CLASSES == 2:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [0, 255, 0],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","elif NO_CLASSES == 3:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [215, 252, 0],\n","                        [0, 0, 255],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","elif NO_CLASSES == 5:\n","    color_lookup = tf.constant([\n","                        [255, 0, 0], #These are the colors for the different classes\n","                        [0, 255, 0],\n","                        [0, 0, 255],\n","                        [255, 255, 0],\n","                        [0, 255, 255],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","elif NO_CLASSES == 8:\n","    color_lookup = tf.constant([\n","                        [85, 85, 85], #These are the colors for the different classes\n","                        [255, 0, 0], \n","                        [0, 255, 0],\n","                        [0, 0, 255],\n","                        [255, 255, 0],\n","                        [0, 255, 255],\n","                        [255, 0, 255],\n","                        [170, 170, 170],\n","                        [0, 0, 0], # This is the default for digits.\n","                        [255, 255, 255] # This is the background.\n","                        ])\n","\n","if no_channels == 'SameClasses':\n","    NO_CHANNELS = NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == '4TimesClasses':\n","    NO_CHANNELS = 4 * NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == '5PlusClasses':\n","    NO_CHANNELS = 5 + NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == 'FiftyChannels':\n","    NO_CHANNELS = 50 # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","\n","\n","if UseLRScheduleQ:\n","    first_point = int(TR_NO_ITERATIONS*0.3333)\n","    second_point = int(TR_NO_ITERATIONS*0.6667)\n","    if LoadPreviousModelQ and RunTrainingQ:\n","        if i_step_load > second_point:\n","            trainer = tf.keras.optimizers.Adam(learning_rate=LR*0.01) # use ADAM optimizer\n","        elif i_step_load > first_point:\n","            remaining_steps = TR_NO_ITERATIONS - i_step_load\n","            lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2 * (second_point - i_step_load)], [LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","            trainer = tf.keras.optimizers.Adam(lr_sched) # use ADAM optimizer with learning rate schedule\n","        else:\n","            lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2 * (first_point - i_step_load), 2 * (second_point - i_step_load)], [LR, LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","    else:\n","        lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2*first_point, 2*second_point], [LR, LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","    trainer = tf.keras.optimizers.Adam(lr_sched) # use ADAM optimizer with learning rate schedule\n","else:\n","    trainer = tf.keras.optimizers.Adam(learning_rate=LR) # use ADAM optimizer\n","\n","loss_log = np.zeros(TR_NO_ITERATIONS) # for plotting of loss function across time\n","loss_log_classes = np.zeros((TR_NO_ITERATIONS, NO_CLASSES)) # for plotting of loss function across time"],"execution_count":9,"outputs":[{"output_type":"stream","text":["count_pixels_ClassB2_5_9_14_20_27_35\n","CA_count_pixels_ClassB2_5_9_14_20_27_35_Modlmiddle_ChannelsFiftyChannels_AddNoise_InitRnd_MutTrain\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RgNuQfis7p4g","executionInfo":{"status":"ok","timestamp":1612635588668,"user_tz":0,"elapsed":6788,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}}},"source":["if LoadPreviousModelQ:\n","    ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_load, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity, dead_pixels=dead_pixels)\n","    ITER = i_step_load + 1\n","else:\n","    ca = cam.CAModel(NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, add_noise=AddNoiseQ, model_complexity=model_complexity, dead_pixels=dead_pixels)\n","    ITER = 0"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HfxS25QT9cdK","executionInfo":{"status":"ok","timestamp":1612635588670,"user_tz":0,"elapsed":6787,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"41917736-be90-4e8f-efa9-6ea208821867"},"source":["ca.update_state.summary()"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (1, 10, 10, 40)           18400     \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (1, 10, 10, 50)           2050      \n","=================================================================\n","Total params: 20,450\n","Trainable params: 20,450\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"PcMsi_PmoEVD","outputId":"3ff1196b-d85e-4d1e-afb4-4f7c29c1e732"},"source":["# Training happens here\n","np.random.seed(SEED_TRAINING)\n","if RunTrainingQ:\n","    # Training Loop\n","    for i in range(ITER, TR_NO_ITERATIONS):\n","        b_idx = np.random.randint(x_train.shape[0], size=BATCH_SIZE)\n","        if InitializeRandomQ:\n","            x0 = ca.initialize_random(x_train[b_idx])\n","        else:\n","            x0 = ca.initialize(x_train[b_idx])\n","        y0 = y_train_hot[b_idx]\n","        y0_label = y_train[b_idx]\n","        y0_label = tf.convert_to_tensor(y0_label)        \n","\n","        x, loss, c_l = cam.train_step(trainer, ca, x0, y0, y0_label, TR_EVOLVE, NO_CLASSES, MutateTrainingQ=MutateTrainingQ)\n","\n","        loss_log[i] = loss.numpy()\n","        loss_log_classes[i, :] = [k.numpy() for k in c_l]\n","\n","        if i % EXPORT_EVERY == 0:\n","            cam.export_model(folder, id_str, ca, i, loss_log, loss_log_classes)\n","        if i % VISUALISE_EVERY == 0:\n","            clear_output()\n","            cavis.plot_loss(loss_log[:i], loss_log_classes[:i, :], folder, id_str, classes_labels, color_lookup, True)\n","\n","        if NO_CLASSES > 5:\n","            print('\\r step: {}, log10(loss): {}'.format(i + 1, np.log10(loss)), end='')\n","        else:\n","            print('\\r step: {}, log10(loss): {}, log10(loss)[classes]: {}'.format(i + 1, np.log10(loss), np.log10(c_l)), end='')\n","    cam.export_model(folder, id_str, ca, TR_NO_ITERATIONS, loss_log, loss_log_classes)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":[" step: 11694, log10(loss): -0.9090331792831421"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vV_WIAkvoGol"},"source":["if RunTestMoviesQ:\n","    eval_bs = 5 ** 2 # number of samples to show in the movie\n","    for i_step_v in i_step_verify:\n","        if task == 'xor':\n","            ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_v, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W_test, AddNoiseQ, model_complexity)\n","        else:\n","            ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_v, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity, dead_pixels=dead_pixels)\n","\n","        np.random.seed(SEED_MOVIES)\n","\n","        new_idx = np.random.randint(0, x_test.shape[0], size=eval_bs)\n","        if InitializeRandomQ:\n","            x0 = ca.initialize_random(x_test[new_idx])\n","        else:\n","            x0 = ca.initialize(x_test[new_idx])\n","\n","        cavis.make_run_videos(folder, id_str, i_step_v, TST_EVOLVE, MutateTestingQ, x0, ca, color_lookup)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sVLw4p-md6WM"},"source":["if RunTestIncreaseQ:\n","    eval_bs = 10 ** 2 # number of samples to show in the movie\n","    max_size = ds_options['MAXPIXELS']\n","\n","    images = np.zeros((max_size, eval_bs, H, W), dtype=np.float32)\n","    for i_img in range(eval_bs):\n","        images[0, i_img, int(H / 2), int(W / 2)] = 1\n","    for j in range(1, max_size):\n","        for i_img in range(eval_bs):\n","            images[j, i_img, :, :] = cavis.add_pixel(images[j - 1, i_img, :, :])\n","    images = tf.constant(images)\n","    for i_step_v in i_step_verify:\n","        ca, loss_log, loss_log_classes = cam.get_model(folder, id_str, i_step_v, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity, dead_pixels=dead_pixels)\n","        cavis.make_videos_increase(folder, id_str, i_step_v, TST_EVOLVE, ca, color_lookup, images, InitializeRandomQ, ds_options['limits_classes'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p8VIFCumNSIi"},"source":[""],"execution_count":null,"outputs":[]}]}