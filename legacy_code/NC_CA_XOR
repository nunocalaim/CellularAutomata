{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"NC_CA_XOR","provenance":[{"file_id":"1ie8_PJUYcS7RAbAP8J_IfGTmE0K3d66P","timestamp":1611256263075},{"file_id":"1SEw3Nsw8w6boGj9trNb5hmwGr1r6Esgu","timestamp":1611144331681},{"file_id":"171_TWT-Am5hgiYyUMDstZdyzrH2nNrL0","timestamp":1610025279276},{"file_id":"1I6DNV4lsaj0Q0M7ybgeUPX40VMvmMmsv","timestamp":1609862549553},{"file_id":"1DdBgaOtQ4U7XjHOfADUJf0akIn92LUHZ","timestamp":1607705721216},{"file_id":"1L2o5A2vko0-KWNNTaELBAjjlvZ2wGN8i","timestamp":1607617282280},{"file_id":"1nvJ3L0U0FP5orhNrtx-TWm-oJ4wAbZsP","timestamp":1607613928447}],"collapsed_sections":[],"authorship_tag":"ABX9TyN3/vCH2iBXArLbR6bDOGqi"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"kDvRLXWAXLw4"},"source":["Celular Automata on a grid must collectively decide if two objects are the same or different"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z-1wywoxncZg","executionInfo":{"status":"ok","timestamp":1611322053163,"user_tz":0,"elapsed":504,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"d6889b28-2967-4b0e-bffa-374cd19e4e60"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","folder = 'drive/MyDrive/Code/GitHub/CellularAutomata'\n","import sys\n","sys.path.insert(1, folder)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zo-knd3UDME_","executionInfo":{"status":"ok","timestamp":1611322056075,"user_tz":0,"elapsed":3410,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"ffab1e3b-95cb-43a2-a1cb-f20155bde146"},"source":["import ca_models\n","import xor_dataset as ds_l\n","import vis_ca\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from IPython.display import clear_output\n","from tensorflow.python.client import device_lib\n","print(device_lib.list_local_devices())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[name: \"/device:CPU:0\"\n","device_type: \"CPU\"\n","memory_limit: 268435456\n","locality {\n","}\n","incarnation: 5661869561807570846\n",", name: \"/device:GPU:0\"\n","device_type: \"GPU\"\n","memory_limit: 7296790048\n","locality {\n","  bus_id: 1\n","  links {\n","  }\n","}\n","incarnation: 8770096573276693086\n","physical_device_desc: \"device: 0, name: Tesla P4, pci bus id: 0000:00:04.0, compute capability: 6.1\"\n","]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EKLwI-jTx2By"},"source":["# import importlib\n","# importlib.reload(ca_models)\n","# importlib.reload(vis_ca)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qu-zdZ8JyffI"},"source":["# Type of Run\n","JustTestingCodeQ = False # If True run everything faster, for Debugging\n","SuffleLabelsQ = False # If True we randomly shuffle the labels, useful to have a notion of the parameters with noise\n","LoadPreviousModelQ = False # if True we load the model, either for further training or just testing\n","i_step_load = 5000\n","RunTrainingQ = True # If True we run the neural network training\n","RunTestMoviesQ = True # if True, in the end we test an increasing size of inputs\n","MutateTestingQ = False # if True, during testing we mutate the image\n","SEED_TRAINING = 1\n","SEED_MOVIES = 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_FamWPRoxKdg"},"source":["# Model Options\n","model_complexity = 'complex' # 'simplest' 'middle' 'complex'\n","NO_NEIGHBORS = 1 # the number of immediate neighbors to consider # 1 2 3 4\n","AddNoiseQ = False # if True then the normal update of the CA has noise added\n","InitializeRandomQ = False # if True, the initial state of the CA is random\n","MutateTrainingQ = False # if True, during training we mutate the image to anothe random one\n","no_channels = '4TimesClasses' # 'SameClasses' '5PlusClasses' '4TimesClasses' 'FiftyChannels'\n","TR_EVOLVE = 50 # Number of time steps to let CA evolve for each input during training\n","TST_EVOLVE = 50 # Number of time steps to let CA evolve for each input during testing\n","BATCH_SIZE = 64 # number of images per batch\n","LR = 1e-3 # initial learning rate\n","UseLRScheduleQ = True # if True use Adam with a learning rate schedule"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wyzeUtdPt3Op"},"source":["# Task and Dataset\n","RebuildDatasetQ = True # if True we rebuild the dataset\n","type_ds = 'xor' # 'simple' 'xor'\n","H = 3\n","WW = 4\n","obj1_str = 'vertical_small'\n","obj2_str = 'horizontal_small'\n","SIZE_DS = 10000\n","SEED_DATASET = 1\n","classes_labels = ['same', 'diff']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4Aj5M6oJxCof","executionInfo":{"status":"ok","timestamp":1611322056082,"user_tz":0,"elapsed":3397,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"d0bfd5fd-e1d3-4354-cb94-624451732d4b"},"source":["if JustTestingCodeQ:\n","    TR_NO_ITERATIONS = 1000 # number of iterations for the training loop\n","    EXPORT_EVERY = 100 # number of iterations between each model export\n","    VISUALISE_EVERY = 50 # number of iteration between each model visualisation\n","    i_step_verify = [1000] # [250, 500, 1000]\n","else:\n","    TR_NO_ITERATIONS = 500000 # number of iterations for the training loop\n","    EXPORT_EVERY = 2000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [240000, 500000] # [240000, 500000]\n","\n","    TR_NO_ITERATIONS = 5000 # number of iterations for the training loop\n","    EXPORT_EVERY = 1000 # number of iterations between each model export\n","    VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    i_step_verify = [0, 5000] # [240000, 500000]\n","\n","    # TR_NO_ITERATIONS = 20000 # number of iterations for the training loop\n","    # EXPORT_EVERY = 1000 # number of iterations between each model export\n","    # VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    # i_step_verify = [0, 20000] # [240000, 500000]\n","\n","    # TR_NO_ITERATIONS = 50000 # number of iterations for the training loop\n","    # EXPORT_EVERY = 2000 # number of iterations between each model export\n","    # VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    # i_step_verify = [50000, 100000] # [240000, 500000]\n","\n","    # TR_NO_ITERATIONS = 200000 # number of iterations for the training loop\n","    # EXPORT_EVERY = 2000 # number of iterations between each model export\n","    # VISUALISE_EVERY = 500 # number of iteration between each model visualisation\n","    # i_step_verify = [100000, 200000] # [240000, 500000]\n","    \n","    #\n","if LoadPreviousModelQ and not RunTrainingQ:\n","    i_step_verify = [i_step_load]\n","\n","ds_str = 'XOR'\n","if type_ds != 'xor':\n","    ds_str += type_ds\n","if SIZE_DS != 10000:\n","    ds_str += '_Size{}'.format(SIZE_DS)\n","if SEED_DATASET != 1:\n","    ds_str += '_Seed{}'.format(SEED_DATASET)\n","if obj1_str != 'vertical_small':\n","    ds_str += '_Obj1{}'.format(obj1_str)\n","if obj2_str != 'horizontal_small':\n","    ds_str += '_Obj2{}'.format(obj2_str)\n","if H != 3:\n","    ds_str += '_H{}'.format(H)\n","ds_str += '_Sep{}'.format(WW)\n","print(ds_str)\n","id_str = 'CA_{}_Modl{}_Channels{}_Neigh{}'.format(ds_str, model_complexity, no_channels, NO_NEIGHBORS) # the prefix to all file names which will be use for saving and loading the model\n","if AddNoiseQ:\n","    id_str += '_AddNoise'\n","if InitializeRandomQ:\n","    id_str += '_InitRnd'\n","if MutateTrainingQ:\n","    id_str += '_MutTrain'\n","if SuffleLabelsQ:\n","    id_str += '_Shuffle'\n","print(id_str)\n","\n","NO_CLASSES = 2 # Number of classes that the CA must distinguish\n","color_lookup = tf.constant([\n","                    [255, 0, 0], #These are the colors for the different classes\n","                    [0, 255, 0],\n","                    [0, 0, 0], # This is for when no class is voted.\n","                    ])\n","if no_channels == 'SameClasses':\n","    NO_CHANNELS = NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == '4TimesClasses':\n","    NO_CHANNELS = 4 * NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == '5PlusClasses':\n","    NO_CHANNELS = 5 + NO_CLASSES # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","elif no_channels == 'FiftyChannels':\n","    NO_CHANNELS = 50 # number of hidden states of the CA, must be at least NO_CLASSES because there are two outputs\n","\n","if UseLRScheduleQ:\n","    first_point = int(TR_NO_ITERATIONS*0.3333)\n","    second_point = int(TR_NO_ITERATIONS*0.6667)\n","    if LoadPreviousModelQ and RunTrainingQ:\n","        if i_step_load > second_point:\n","            trainer = tf.keras.optimizers.Adam(learning_rate=LR*0.01) # use ADAM optimizer\n","        elif i_step_load > first_point:\n","            remaining_steps = TR_NO_ITERATIONS - i_step_load\n","            lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2 * (second_point - i_step_load)], [LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","            trainer = tf.keras.optimizers.Adam(lr_sched) # use ADAM optimizer with learning rate schedule\n","        else:\n","            lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2 * (first_point - i_step_load), 2 * (second_point - i_step_load)], [LR, LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","    else:\n","        lr_sched = tf.keras.optimizers.schedules.PiecewiseConstantDecay([2*first_point, 2*second_point], [LR, LR*0.1, LR*0.01]) # we need to multiply by two because in each training step we perform 2 gradient descents\n","    trainer = tf.keras.optimizers.Adam(lr_sched) # use ADAM optimizer with learning rate schedule\n","else:\n","    trainer = tf.keras.optimizers.Adam(learning_rate=LR) # use ADAM optimizer\n","\n","loss_log = np.zeros(TR_NO_ITERATIONS) # for plotting of loss function across time\n","loss_log_classes = np.zeros((TR_NO_ITERATIONS, NO_CLASSES)) # for plotting of loss function across time"],"execution_count":null,"outputs":[{"output_type":"stream","text":["XOR_Sep4\n","CA_XOR_Sep4_Modlcomplex_Channels4TimesClasses_Neigh1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9aZs8ebLu9Qn","colab":{"base_uri":"https://localhost:8080/","height":292},"executionInfo":{"status":"ok","timestamp":1611322056389,"user_tz":0,"elapsed":3698,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"14c05814-a75c-4ffd-b1ac-55f4968dd675"},"source":["# Prepare the dataset\n","dict_obj = {\n","    'vertical_small':\n","    np.array([[1], [1], [1]]),\n","    'horizontal_small':\n","    np.array([[1, 1, 1]]),\n","}\n","t_obj1 = dict_obj[obj1_str]\n","t_obj2 = dict_obj[obj2_str]\n","obj1, obj2 = ds_l.embed_objs(t_obj1, t_obj2, H)\n","W = 2 * H + WW\n","\n","BuildDS = False\n","if RebuildDatasetQ:\n","    BuildDS = True\n","else:\n","    try:\n","        res = np.load(folder + '/dataset/{}.npz'.format(ds_str))\n","        x_train, x_test, y_train, y_test = res['x_train'], res['x_test'], res['y_train'], res['y_test']\n","    except:\n","        BuildDS = True\n","if BuildDS:\n","\n","    x_train, x_test, y_train, y_test = ds_l.build_dataset(SIZE_DS, obj1, obj2, WW, SEED_DATASET, type_ds=type_ds)\n","    print(y_train)        \n","    np.savez(folder + '/dataset/{}.npz'.format(ds_str), x_train=x_train, x_test=x_test, y_train=y_train, y_test=y_test)\n","\n","    cols=7\n","    rows=7\n","    fig, ax = plt.subplots()\n","    DISP = np.zeros((1, cols * W + 1))\n","    RES = [[0 for i in range(cols)] for j in range(rows)]\n","    for i in range(rows):\n","        disp = np.zeros((H, 1))\n","        for j in range(cols):\n","            image_idx = np.random.randint(x_train.shape[0])\n","            disp = np.hstack((disp, x_train[image_idx, :, :]))\n","            RES[i][j] = y_train[image_idx]\n","        DISP = np.vstack((DISP, disp))\n","    ax.imshow(DISP)\n","    print(np.array(RES))\n","\n","if SuffleLabelsQ:\n","    np.random.shuffle(y_train)\n","y_train_hot = ds_l.y2yhot(x_train, y_train, NO_CLASSES)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0 1 1 ... 1 0 0]\n","[[0 0 1 0 1 1 1]\n"," [1 1 1 0 1 0 1]\n"," [0 1 1 0 1 1 1]\n"," [0 0 1 1 0 1 1]\n"," [1 0 1 0 0 0 1]\n"," [0 1 1 0 0 1 1]\n"," [0 1 0 1 0 1 1]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m5S1jVq6HrFO","executionInfo":{"status":"ok","timestamp":1611322056390,"user_tz":0,"elapsed":3694,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"6d216765-2195-48e3-f7f9-478633bf7db4"},"source":["print(y_train_hot.shape, y_train.shape, np.all(np.sum(y_train_hot, axis=(1, 2, 3)) == H * H * 3), np.max(y_train_hot), np.min(y_train_hot), np.isnan(x_train).any())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(8000, 3, 10, 2) (8000,) False 1.0 0.0 False\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yxQyIu_1IEba","executionInfo":{"status":"ok","timestamp":1611322056391,"user_tz":0,"elapsed":3691,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"54434d0c-e382-4dd2-ea2f-b907a61d6bed"},"source":["y = 1\n","for i in range(y_train.shape[0]):\n","    y *= np.sum(y_train_hot[i, 0, 0, y_train[i]])\n","print(y)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RgNuQfis7p4g"},"source":["if LoadPreviousModelQ:\n","    ca, loss_log, loss_log_classes = ca_models.get_model(folder, id_str, i_step_load, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity)\n","    ITER = i_step_load + 1\n","else:\n","    ca = ca_models.CAModel(NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, add_noise=AddNoiseQ, model_complexity=model_complexity)\n","    ITER = 0"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HfxS25QT9cdK","executionInfo":{"status":"ok","timestamp":1611322058008,"user_tz":0,"elapsed":5300,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"01f6233b-8744-470d-927a-7eb985941990"},"source":["ca.update_state.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (1, 3, 10, 80)            6560      \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (1, 3, 10, 120)           9720      \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (1, 3, 10, 8)             968       \n","=================================================================\n","Total params: 17,248\n","Trainable params: 17,248\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"PcMsi_PmoEVD","executionInfo":{"status":"ok","timestamp":1611322301026,"user_tz":0,"elapsed":248312,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"710c4b9d-737d-40e0-d56c-4bfec1fac18d"},"source":["# Training happens here\n","np.random.seed(SEED_TRAINING)\n","if RunTrainingQ:\n","    # Training Loop\n","    for i in range(ITER, TR_NO_ITERATIONS):\n","        b_idx = np.random.randint(x_train.shape[0], size=BATCH_SIZE)\n","        if InitializeRandomQ:\n","            x0 = ca.initialize_random(x_train[b_idx])\n","        else:\n","            x0 = ca.initialize(x_train[b_idx])\n","        y0 = y_train_hot[b_idx]\n","        y0_label = y_train[b_idx]\n","        y0_label = tf.convert_to_tensor(y0_label)        \n","\n","        x, loss, c_l = ca_models.train_step(trainer, ca, x0, y0, y0_label, TR_EVOLVE, NO_CLASSES, MutateTrainingQ=MutateTrainingQ)\n","\n","        loss_log[i] = loss.numpy()\n","        loss_log_classes[i, :] = [k.numpy() for k in c_l]\n","\n","        if i % VISUALISE_EVERY == 0:\n","            clear_output()\n","            vis_ca.plot_loss(loss_log[:i], loss_log_classes[:i, :], folder, id_str, classes_labels, color_lookup, True)\n","        if i % EXPORT_EVERY == 0:\n","            ca_models.export_model(folder, id_str, ca, i, loss_log, loss_log_classes)\n","\n","        if NO_CLASSES > 5:\n","            print('\\r step: {}, log10(loss): {}'.format(i + 1, np.log10(loss)), end='')\n","        else:\n","            print('\\r step: {}, log10(loss): {}, log10(loss)[classes]: {}'.format(i + 1, np.log10(loss), np.log10(c_l)), end='')\n","    ca_models.export_model(folder, id_str, ca, TR_NO_ITERATIONS, loss_log, loss_log_classes)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":[" step: 5000, log10(loss): 1.1758190393447876, log10(loss)[classes]: [1.1651287 1.1869172]"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vV_WIAkvoGol","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1611322302122,"user_tz":0,"elapsed":249404,"user":{"displayName":"Nuno Calaim","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsCxTgIhzSJMrYldropFf8at3ge2yEnwJrwCpQjDw=s64","userId":"02378072602186647489"}},"outputId":"73a5fdf8-53f7-41b6-e28b-61f8bcd4d687"},"source":["if RunTestMoviesQ:\n","    eval_bs = 5 ** 2 # number of samples to show in the movie\n","    for i_step_v in i_step_verify:\n","        ca, loss_log, loss_log_classes = ca_models.get_model(folder, id_str, i_step_v, NO_NEIGHBORS, NO_CHANNELS, NO_CLASSES, H, W, AddNoiseQ, model_complexity)\n","\n","        np.random.seed(SEED_MOVIES)\n","\n","        new_idx = np.random.randint(0, x_test.shape[0] - 1, size=eval_bs)\n","        if InitializeRandomQ:\n","            x0 = ca.initialize_random(x_test[new_idx])\n","        else:\n","            x0 = ca.initialize(x_test[new_idx])\n","\n","        vis_ca.make_run_videos(folder, id_str, i_step_v, TST_EVOLVE, MutateTestingQ, x0, ca, color_lookup)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 51/51 [00:00<00:00, 141.95it/s]\n","100%|██████████| 51/51 [00:00<00:00, 154.03it/s]\n"],"name":"stderr"}]}]}